args = ("hs", "nx", "nz", "dt", "NUM_VARS", "state_out", "state_init", "tend")

set_argnames(*args)

[fortran, openmp_fortran]

    integer :: i,k,ll

    !$omp parallel do collapse(3)
    do ll = 1 , NUM_VARS
      do k = 1 , nz
        do i = 1 , nx
          state_out(i,k,ll) = state_init(i,k,ll) + dt * tend(i,k,ll)
        end do
      end do
    end do

[omptarget_fortran]

    integer :: i,k,ll

    !$omp target update to(state_init)

    !$omp target teams num_teams(nx) distribute parallel do collapse(3)
    do ll = 1 , NUM_VARS
      do k = 1 , nz
	    do i = 1 , nx
          state_out(i,k,ll) = state_init(i,k,ll) + dt * tend(i,k,ll)
        end do
      end do
    end do
    !$omp end target teams distribute parallel do

    !$omp target update from(state_out)

[openacc_fortran]

    integer :: i,k,ll

    !$acc update device(state_init, tend)

	!$acc parallel loop collapse(3)
    do k = 1 , nz
	  do i = 1 , nx
        do ll = 1 , NUM_VARS
          state_out(i,k,ll) = state_init(i,k,ll) + dt * tend(i,k,ll)
        end do
      end do
    end do

    !$acc update self(state_out)


[cpp, omptarget_cpp, openacc_cpp]

    #pragma omp target update to(state_init)
    #pragma acc update device(state_init)

    #pragma omp target teams distribute parallel for collapse(3)
    #pragma acc parallel loop collapse(3)
    for (int ll=0; ll < NUM_VARS; ll++) {
      for (int k=0; k < nz; k++) {
        for (int i=0; i < nx; i++) {
          state_out[i+hs][k+hs][ll] = state_init[i+hs][k+hs][ll] + dt * tend[i][k][ll];
        }
      }
    }

    #pragma acc update self(state_out)
    #pragma omp target update from(state_out)
